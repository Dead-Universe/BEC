{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to BuildingsBench","text":""},{"location":"#overview","title":"Overview","text":"<p>BuildingsBench is a platform for:</p> <ul> <li>Large-scale pretraining with the simulated Buildings-900K dataset for short-term load forecasting (STLF).</li> <li>Benchmarking on two tasks evaluating generalization: zero-shot STLF and transfer learning for STLF.</li> </ul> <p>We provide an index-based PyTorch Dataset for large-scale pretraining, easy-to-use PyTorch and Pandas dataloaders for multiple real building energy consumption datasets, from persistence (simple) to transformers (advanced) baselines, metrics management, a tokenizer based on KMeans for load time series, and more.</p> <p>Read more about BuildingsBench in our paper or check out our Github.</p>"},{"location":"#load-a-benchmark-dataset","title":"Load a benchmark dataset","text":"<pre><code>from buildings_bench import load_torch_dataset\n# Load a dataset generator for a dataset of buildings\nbuildings_dataset_generator = load_torch_dataset('bdg-2:panther')\n# Each building is a torch.utils.data.Dataset\nfor building_name, building in buildings_dataset_generator:\nbuilding_dataloader = torch.utils.data.DataLoader(building,\nbatch_size=358,\nnum_workers=4,\nshuffle=False)\nfor sample in building_dataloader:\nx = sample['load']\n# context = x[:, :168], 1 week hourly of context\n# target = x[:, -24:], 24 hour target prediction\n# ...\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>To just access the provided dataloaders, models, metrics, etc., install the package with:</p> <pre><code>pip install buildings_bench\n</code></pre> <p>To run the benchmark itself with provided Python scripts, clone this repository and install it in editable mode in a virtual environment or a conda environment.</p> <p>First, create an environment with <code>python&gt;=3.8</code>, for example: <code>conda create -n buildings_bench python=3.8</code>.</p> <p>Then, install the package in editable mode with <pre><code>git clone https://github.com/NREL/BuildingsBench.git\ncd BuildingsBench\npip install -e .\n</code></pre></p>"},{"location":"#installing-faiss-gpu","title":"Installing faiss-gpu","text":"<p>Due to a PyPI limitation, we have to install <code>faiss-gpu</code> (for KMeans) by directly downloading the wheel from https://github.com/kyamagu/faiss-wheels/releases/. Download the wheel for the python version you are using, then install it in your environment.</p> <p>For example:</p> <pre><code>wget https://github.com/kyamagu/faiss-wheels/releases/download/v1.7.3/faiss_gpu-1.7.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n\npip install faiss_gpu-1.7.3-cp38-cp38-manylinux2014_x86_64.whl\n</code></pre>"},{"location":"#optional-lightgbm","title":"[Optional] LightGBM","text":"<p>If running the LightGBM baseline, you will need to install LightGBM. Follow instructions here for your OS.  Then, <code>pip install skforecast</code>.</p>"},{"location":"#environment-variables","title":"Environment variables","text":"<p>Set the environment variable <code>BUILDINGS_BENCH</code> to the path where your stored the datasets <code>BuildingsBench</code>.</p> <pre><code>export BUILDINGS_BENCH=/path/to/BuildingsBench`\n</code></pre> <p>If using <code>wandb</code>, set the following:</p> <ul> <li><code>WANDB_ENTITY</code>: your wandb username</li> <li><code>WANDB_PROJECT</code>: the name of your wandb project for this benchmark</li> </ul>"},{"location":"#run-tests","title":"Run tests","text":"<p>Verify your installation by running unit tests:</p> <pre><code>python -m unittest\n</code></pre>"},{"location":"#download-the-datasets","title":"Download the datasets","text":"<p>Download the tar files to disk and untar, which will create a directory called <code>BuildingsBench</code> with the datasets.</p> <p>The files are accessible for download here.</p>"},{"location":"running/","title":"Running The Benchmark","text":""},{"location":"running/#running-the-benchmark","title":"Running The Benchmark","text":"<p>We provide scripts in the <code>./scripts</code> directory for pretraining and to run the benchmark tasks (zero-shot STLF and transfer learning), either with our provided baselines or your own model.</p> <p>Our benchmark assumes each model takes as input a dictionary of torch tensors with the following keys:</p> <pre><code>{\n'load': torch.Tensor,  # (batch_size, seq_len, 1)\n'building_type': torch.LongTensor,  # (batch_size, 1)\n'day_of_year': torch.FloatTensor,  # (batch_size, 1)\n'hour_of_day': torch.FloatTensor,  # (batch_size, 1)\n'day_of_week': torch.FloatTensor,  # (batch_size, 1)\n'latitude': torch.FloatTensor,  # (batch_size, 1)\n'longitude': torch.FloatTensor,  # (batch_size, 1)\n}\n</code></pre> <p>To use these scripts with your model you'll need to register your model with our platform.</p>"},{"location":"running/#registering-your-model","title":"Registering your model","text":"<p>Make sure to have installed the benchmark in editable mode: <code>pip install -e .</code></p> <ol> <li>Create a file called <code>your_model.py</code> with your model's implementation, and make your model a subclass of the base model in <code>./buildings_bench/models/base_model.py</code>. Make sure to implement the abstract methods: <code>forward</code>, <code>loss</code>, <code>load_from_checkpoint</code>, <code>predict</code>, <code>unfreeze_and_get_parameters_for_finetuning</code>.</li> <li>Place this file under <code>./buildings_bench/models/your_model.py.</code></li> <li>Import your model class and add your model's name to the <code>model_registry</code> dictionary in <code>BuildingsBench/buildings_bench/models/__init__.py</code>.</li> <li>Create a TOML config file under <code>./configs/your_model.toml</code> with each keyword argument your model expects in its constructor (i.e., the hyperparameters for your model) and any additional args for the script you want to run.</li> </ol> <p>The TOML config file should look something like this:</p> <p><pre><code>[model]\n# your model's keyword arguments\n[pretrain]\n# override any of the default pretraining argparse args here\n[zero_shot]\n# override any of the default zero_shot argparse args here\n[transfer_learning]\n# override any of the default transfer_learning argparse args here\n</code></pre> See <code>./configs/TransformerWithTokenizer-L.toml</code> for an example.</p>"},{"location":"running/#pretraining","title":"Pretraining","text":"<p><code>python3 scripts/pretrain.py --config your_model.toml</code></p> <p>This script is implemented with PyTorch <code>DistributedDataParallel</code>, so it can be launched with <code>torchrun</code>. See <code>./scripts/pretrain.sh</code> for an example.</p>"},{"location":"running/#zero-shot-stlf","title":"Zero-shot STLF","text":"<p><code>python3 scripts/zero_shot.py --config your_model.toml --checkpoint /path/to/checkpoint.pt</code></p>"},{"location":"running/#transfer-learning-for-stlf","title":"Transfer Learning for STLF","text":"<p><code>python3 scripts/transfer_learning_torch.py --config your_model.toml --checkpoint /path/to/checkpoint.pt</code> </p>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#tutorials","title":"Tutorials","text":"<ol> <li>Compute aggregate statistics from results files</li> </ol>"},{"location":"API/data/buildings_bench-data/","title":"buildings_bench.data","text":""},{"location":"API/data/buildings_bench-data/#loading-benchmark-datasets","title":"Loading benchmark datasets","text":"<p>Function definitions for loading Torch and Pandas datasets.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data","title":"<code>buildings_bench.data</code>","text":""},{"location":"API/data/buildings_bench-data/#buildings_bench.data.load_pretraining","title":"<code>load_pretraining(name: str, num_buildings_ablation: int = -1, apply_scaler_transform: str = '', scaler_transform_path: Path = None, context_len: Path = 168, pred_len: Path = 24) -&gt; torch.utils.data.Dataset</code>","text":"<p>Pre-training datasets: buildings-900k-train, buildings-900k-val</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the dataset to load.</p> required <code>num_buildings_ablation</code> <code>int</code> <p>Number of buildings to use for pre-training.                             If -1, use all buildings.</p> <code>-1</code> <code>apply_scaler_transform</code> <code>str</code> <p>If not using quantized load or unscaled loads,                      applies a {boxcox,standard} scaling transform to the load. Default: ''.</p> <code>''</code> <code>scaler_transform_path</code> <code>Path</code> <p>Path to data for transform, e.g., pickled data for BoxCox transform.</p> <code>None</code> <code>context_len</code> <code>int</code> <p>Length of the context. Defaults to 168.</p> <code>168</code> <code>pred_len</code> <code>int</code> <p>Length of the prediction horizon. Defaults to 24.</p> <code>24</code> <p>Returns:</p> Type Description <code>torch.utils.data.Dataset</code> <p>torch.utils.data.Dataset: Dataset for pretraining.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.load_torch_dataset","title":"<code>load_torch_dataset(name: str, dataset_path: Path = None, apply_scaler_transform: str = '', scaler_transform_path: Path = None, context_len: Path = 168, pred_len: Path = 24) -&gt; Union[TorchBuildingDatasetsFromCSV, TorchBuildingDatasetFromParquet]</code>","text":"<p>Load datasets by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the dataset to load.</p> required <code>dataset_path</code> <code>Path</code> <p>Path to the benchmark data. Optional.</p> <code>None</code> <code>apply_scaler_transform</code> <code>str</code> <p>If not using quantized load or unscaled loads,                      applies a {boxcox,standard} scaling transform to the load. Default: ''.</p> <code>''</code> <code>scaler_transform_path</code> <code>Path</code> <p>Path to data for transform, e.g., pickled data for BoxCox transform.</p> <code>None</code> <code>context_len</code> <code>int</code> <p>Length of the context. Defaults to 168.</p> <code>168</code> <code>pred_len</code> <code>int</code> <p>Length of the prediction horizon. Defaults to 24.</p> <code>24</code> <p>Returns:</p> Type Description <code>Union[TorchBuildingDatasetsFromCSV, TorchBuildingDatasetFromParquet]</code> <p>Union[TorchBuildingDatasetsFromCSV, TorchBuildingDatasetFromParquet]: Dataset for benchmarking.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.load_pandas_dataset","title":"<code>load_pandas_dataset(name: str, dataset_path: Path = None, feature_set: str = 'engineered', apply_scaler_transform: str = '', scaler_transform_path: Path = None) -&gt; PandasBuildingDatasetsFromCSV</code>","text":"<p>Load datasets by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the dataset to load.</p> required <code>dataset_path</code> <code>Path</code> <p>Path to the benchmark data. Optional.</p> <code>None</code> <code>feature_set</code> <code>str</code> <p>Feature set to use. Default: 'engineered'.</p> <code>'engineered'</code> <code>apply_scaler_transform</code> <code>str</code> <p>If not using quantized load or unscaled loads,                         applies a {boxcox,standard} scaling transform to the load. Default: ''. </p> <code>''</code> <code>scaler_transform_path</code> <code>Path</code> <p>Path to data for transform, e.g., pickled data for BoxCox transform.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>PandasBuildingDatasetsFromCSV</code> <code>PandasBuildingDatasetsFromCSV</code> <p>Generator of Pandas datasets for benchmarking.</p>"},{"location":"API/data/buildings_bench-data/#buildings-900k-pytorch-dataset","title":"Buildings-900K PyTorch Dataset","text":""},{"location":"API/data/buildings_bench-data/#buildings_bench.data.buildings900K","title":"<code>buildings_bench.data.buildings900K</code>","text":""},{"location":"API/data/buildings_bench-data/#buildings_bench.data.buildings900K.Buildings900K","title":"<code>Buildings900K</code>","text":"<p>         Bases: <code>torch.utils.data.Dataset</code></p> <p>This is an indexed dataset for the Buildings-900K dataset. It uses an index file to quickly load a sub-sequence from a time series in a multi-building Parquet file. The index file is a tab separated file with the following columns:</p> <ol> <li>Building-type-and-year (e.g., comstock_tmy3_release_1)</li> <li>Census region (e.g., by_puma_midwest)</li> <li>PUMA ID</li> <li>Building ID</li> <li>Hour of year pointer (e.g., 0070)</li> </ol> <p>The sequence pointer is used to extract the slice [pointer - context length : pointer + pred length] for a given building ID.</p> <p>The time series are not stored chronologically and must be sorted by timestamp after loading.</p> <p>Each dataloader worker has its own file pointer to the index file. This is to avoid weird multiprocessing errors from sharing a file pointer. We 'seek' to the correct line in the index file for random access.</p> <p>With 4 workers, data loading with an indexed dataset requires about 30GB of RAM.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.buildings900K.Buildings900K.__init__","title":"<code>__init__(dataset_path: Path, index_file: str, context_len: int = 168, pred_len: int = 24, apply_scaler_transform: str = '', scaler_transform_path: Path = None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>dataset_path</code> <code>Path</code> <p>Path to the pretraining dataset.</p> required <code>index_file</code> <code>str</code> <p>Name of the index file</p> required <code>context_len</code> <code>int</code> <p>Length of the context. Defaults to 168.  The index file has to be generated with the same context length.</p> <code>168</code> <code>pred_len</code> <code>int</code> <p>Length of the prediction horizon. Defaults to 24. The index file has to be generated with the same pred length.</p> <code>24</code> <code>apply_scaler_transform</code> <code>str</code> <p>Apply a scaler transform to the load. Defaults to ''.</p> <code>''</code> <code>scaler_transform_path</code> <code>Path</code> <p>Path to the scaler transform. Defaults to None.</p> <code>None</code>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.buildings900K.Buildings900K.init_fp","title":"<code>init_fp()</code>","text":"<p>Each worker needs to open its own file pointer to avoid  weird multiprocessing errors from sharing a file pointer.</p> <p>This is not called in the main process. This is called in the DataLoader worker_init_fn. The file is opened in binary mode which lets us disable buffering.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.buildings900K.Buildings900K.__read_index_file","title":"<code>__read_index_file(index_file: Path) -&gt; None</code>","text":"<p>Extract metadata from index file.</p>"},{"location":"API/data/buildings_bench-data/#generators-and-datasets","title":"Generators and Datasets","text":""},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets","title":"<code>buildings_bench.data.datasets</code>","text":""},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.TorchBuildingDataset","title":"<code>TorchBuildingDataset</code>","text":"<p>         Bases: <code>torch.utils.data.Dataset</code></p> <p>PyTorch Dataset for a single building's Pandas Dataframe with a timestamp index and a 'power' column.</p> <p>Used to iterate over mini-batches of 192-hour subsequences.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.TorchBuildingDataset.__init__","title":"<code>__init__(dataframe: pd.DataFrame, building_latlon: List[float], building_type: BuildingTypes, context_len: int = 168, pred_len: int = 24, sliding_window: int = 24, apply_scaler_transform: str = '', scaler_transform_path: Path = None, is_leap_year: Path = False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>pd.DataFrame</code> <p>Pandas DataFrame with a timestamp index and a 'power' column.</p> required <code>building_latlon</code> <code>List[float]</code> <p>Latitude and longitude of the building.</p> required <code>building_type</code> <code>BuildingTypes</code> <p>Building type for the dataset.</p> required <code>context_len</code> <code>int</code> <p>Length of context. Defaults to 168.</p> <code>168</code> <code>pred_len</code> <code>int</code> <p>Length of prediction. Defaults to 24.</p> <code>24</code> <code>sliding_window</code> <code>int</code> <p>Stride for sliding window to split timeseries into test samples. Defaults to 24.</p> <code>24</code> <code>apply_scaler_transform</code> <code>str</code> <p>Apply scaler transform {boxcox,standard} to the load. Defaults to ''.</p> <code>''</code> <code>scaler_transform_path</code> <code>Path</code> <p>Path to the pickled data for BoxCox transform. Defaults to None.</p> <code>None</code> <code>is_leap_year</code> <code>bool</code> <p>Is the year a leap year? Defaults to False.</p> <code>False</code>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.TorchBuildingDatasetFromParquet","title":"<code>TorchBuildingDatasetFromParquet</code>","text":"<p>Generate PyTorch Datasets out of Parquet files.</p> <p>Each file has multiple buildings (with same Lat/Lon and building type) and each building is a column. All time series are for the same year.     </p> <p>Attributes:</p> Name Type Description <code>building_datasets</code> <code>dict</code> <p>Maps unique building ids to a TorchBuildingDataset.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.TorchBuildingDatasetFromParquet.__init__","title":"<code>__init__(parquet_datasets: List[str], building_latlons: List[List[float]], building_types: List[BuildingTypes], context_len: int = 168, pred_len: int = 24, sliding_window: int = 24, apply_scaler_transform: str = '', scaler_transform_path: Path = None, leap_years: List[int] = None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>parquet_datasets</code> <code>List[str]</code> <p>List of paths to a parquet file, each has a timestamp index and multiple columns, one per building.</p> required <code>building_latlons</code> <code>List[List[float]]</code> <p>List of latlons for each parquet file.</p> required <code>building_types</code> <code>List[BuildingTypes]</code> <p>List of building types for each parquet file.</p> required <code>context_len</code> <code>int</code> <p>Length of context. Defaults to 168.</p> <code>168</code> <code>pred_len</code> <code>int</code> <p>Length of prediction. Defaults to 24.</p> <code>24</code> <code>sliding_window</code> <code>int</code> <p>Stride for sliding window to split timeseries into test samples. Defaults to 24.</p> <code>24</code> <code>apply_scaler_transform</code> <code>str</code> <p>Apply scaler transform {boxcox,standard} to the load. Defaults to ''.</p> <code>''</code> <code>scaler_transform_path</code> <code>Path</code> <p>Path to the pickled data for BoxCox transform. Defaults to None.</p> <code>None</code> <code>leap_years</code> <code>List[int]</code> <p>List of leap years. Defaults to None.</p> <code>None</code>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.TorchBuildingDatasetFromParquet.__iter__","title":"<code>__iter__() -&gt; Iterator[Tuple[str, TorchBuildingDataset]]</code>","text":"<p>Generator to iterate over the building datasets.</p> <p>Yields:</p> Type Description <code>Iterator[Tuple[str, TorchBuildingDataset]]</code> <p>A pair of building id, TorchBuildingDataset objects.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.TorchBuildingDatasetsFromCSV","title":"<code>TorchBuildingDatasetsFromCSV</code>","text":"<p>Generate PyTorch Datasets from a list of CSV files.</p> <p>Attributes:</p> Name Type Description <code>building_datasets</code> <code>dict</code> <p>Maps unique building ids to a list of tuples (year, TorchBuildingDataset).</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.TorchBuildingDatasetsFromCSV.__init__","title":"<code>__init__(data_path: Path, building_year_files: List[str], building_latlon: List[float], building_type: BuildingTypes, context_len: int = 168, pred_len: int = 24, sliding_window: int = 24, apply_scaler_transform: str = '', scaler_transform_path: Path = None, leap_years: List[int] = None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data_path</code> <code>Path</code> <p>Path to the dataset</p> required <code>building_year_files</code> <code>List[str]</code> <p>List of paths to a csv file, each has a timestamp index and multiple columns, one per building.</p> required <code>building_type</code> <code>BuildingTypes</code> <p>Building type for the dataset.</p> required <code>context_len</code> <code>int</code> <p>Length of context. Defaults to 168.</p> <code>168</code> <code>pred_len</code> <code>int</code> <p>Length of prediction sequence for the forecasting model. Defaults to 24.</p> <code>24</code> <code>sliding_window</code> <code>int</code> <p>Stride for sliding window to split timeseries into test samples. Defaults to 24.</p> <code>24</code> <code>apply_scaler_transform</code> <code>str</code> <p>Apply scaler transform {boxcox,standard} to the load. Defaults to ''.</p> <code>''</code> <code>scaler_transform_path</code> <code>Path</code> <p>Path to the pickled data for BoxCox transform. Defaults to None.</p> <code>None</code> <code>leap_years</code> <code>List[int]</code> <p>List of leap years. Defaults to None.</p> <code>None</code>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.TorchBuildingDatasetsFromCSV.__iter__","title":"<code>__iter__() -&gt; Iterator[Tuple[str, torch.utils.data.ConcatDataset]]</code>","text":"<p>A Generator for TorchBuildingDataset objects.</p> <p>Yields:</p> Type Description <code>Iterator[Tuple[str, torch.utils.data.ConcatDataset]]</code> <p>A tuple of the building id and a ConcatDataset of the TorchBuildingDataset objects for all years.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.PandasBuildingDatasetsFromCSV","title":"<code>PandasBuildingDatasetsFromCSV</code>","text":"<p>Generate Pandas Dataframes from a list of CSV files.</p> <p>Create a dictionary of building datasets from a list of csv files. Used as a generator to iterate over Pandas Dataframes for each building. The Pandas Dataframe contain all of the years of data for the building.</p> <p>Attributes:</p> Name Type Description <code>building_datasets</code> <code>dict</code> <p>Maps unique building ids to a list of tuples (year, Dataframe).</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.PandasBuildingDatasetsFromCSV.__init__","title":"<code>__init__(data_path: Path, building_year_files: List[str], building_latlon: List[float], building_type: BuildingTypes, features: str = 'transformer', apply_scaler_transform: str = '', scaler_transform_path: Path = None, leap_years: List[int] = [])</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data_path</code> <code>Path</code> <p>Path to the dataset</p> required <code>building_year_files</code> <code>List[str]</code> <p>List of paths to a csv file, each has a timestamp index and multiple columns, one per building.</p> required <code>building_type</code> <code>BuildingTypes</code> <p>Building type for the dataset.</p> required <code>features</code> <code>str</code> <p>Type of features to use. Defaults to 'transformer'. {'transformer','engineered'} 'transformer' features: load, latitude, longitude, hour of day, day of week, day of year, building type 'engineered' features are an expansive list of mainly calendar-based features, useful for traditional ML models.</p> <code>'transformer'</code> <code>apply_scaler_transform</code> <code>str</code> <p>Apply scaler transform {boxcox,standard} to the load. Defaults to ''.</p> <code>''</code> <code>scaler_transform_path</code> <code>Path</code> <p>Path to the pickled data for BoxCox transform. Defaults to None.</p> <code>None</code> <code>leap_years</code> <code>List[int]</code> <p>List of leap years. Defaults to None.</p> <code>[]</code>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.PandasBuildingDatasetsFromCSV.__iter__","title":"<code>__iter__() -&gt; Iterator[Tuple[str, pd.DataFrame]]</code>","text":"<p>Generator for iterating over the dataset.</p> <p>Yields:</p> Type Description <code>Iterator[Tuple[str, pd.DataFrame]]</code> <p>A pair of building id and Pandas dataframe.  The dataframe has all years concatenated.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.PandasTransformerDataset","title":"<code>PandasTransformerDataset</code>","text":"<p>         Bases: <code>torch.utils.data.Dataset</code></p> <p>Create a Torch Dataset out of a Pandas DataFrame.</p> <p>Used to iterate over mini-batches of 192-hour sub-sequences.</p>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.PandasTransformerDataset.__init__","title":"<code>__init__(df: pd.DataFrame, context_len: int = 168, pred_len: int = 24, sliding_window: int = 24)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>df</code> <code>pd.DataFrame</code> <p>Pandas DataFrame with columns: load, latitude, longitude, hour of day, day of week, day of year, building type</p> required <code>context_len</code> <code>int</code> <p>Length of context.. Defaults to 168.</p> <code>168</code> <code>pred_len</code> <code>int</code> <p>Length of prediction sequence for the forecasting model. Defaults to 24.</p> <code>24</code> <code>sliding_window</code> <code>int</code> <p>Stride for sliding window to split timeseries into test samples. Defaults to 24.</p> <code>24</code>"},{"location":"API/data/buildings_bench-data/#buildings_bench.data.datasets.keep_buildings","title":"<code>keep_buildings(dataset_generator: Union[TorchBuildingDatasetsFromCSV, TorchBuildingDatasetFromParquet], building_ids: List[str]) -&gt; Union[TorchBuildingDatasetsFromCSV, TorchBuildingDatasetFromParquet]</code>","text":"<p>Remove all buildings not listed in building_ids from the building_datasets dictionary from the generator class.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_generator</code> <code>Union[TorchBuildingDatasetsFromCSV, TorchBuildingDatasetFromParquet]</code> <p>Dataset generator class.</p> required <code>building_ids</code> <code>List[str]</code> <p>List of building ids to keep.</p> required <p>Returns:</p> Name Type Description <code>dataset_generator</code> <code>Union[TorchBuildingDatasetsFromCSV, TorchBuildingDatasetFromParquet]</code> <p>Dataset generator  class with only the buildings listed in building_ids.</p>"},{"location":"API/models/buildings_bench-models/","title":"buildings_bench.models","text":""},{"location":"API/models/buildings_bench-models/#buildings_bench.models","title":"<code>buildings_bench.models</code>","text":""},{"location":"API/models/buildings_bench-models/#buildings_bench.models.model_factory","title":"<code>model_factory(model_name: str, model_args: Dict) -&gt; Tuple[torch.nn.Module, Callable, Callable]</code>","text":"<p>Instantiate and returns a model for the benchmark.</p> <p>Returns the model itself, the loss function to use, and the predict function.</p> <p>The predict function should return a tuple of two tensors:  (point predictions, prediction distribution parameters) where the distribution parameters may be, e.g., logits, or mean and variance.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model.</p> required <code>model_args</code> <code>Dict</code> <p>The keyword arguments for the model.</p> required <p>Returns:</p> Name Type Description <code>model</code> <code>torch.nn.Module</code> <p>the instantiated model  </p> <code>loss</code> <code>Callable</code> <p>loss function</p> <code>predict</code> <code>Callable</code> <p>predict function</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.base_model","title":"<code>buildings_bench.models.base_model</code>","text":""},{"location":"API/models/buildings_bench-models/#buildings_bench.models.base_model.BaseModel","title":"<code>BaseModel</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Base class for all models.</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.base_model.BaseModel.forward","title":"<code>forward(x: Dict) -&gt; Tuple[torch.Tensor, torch.Tensor]</code>  <code>abstractmethod</code>","text":"<p>Forward pass. </p> Expected keys in x <ul> <li>'load': torch.Tensor of shape [batch_size, seq_len, 1]</li> <li>'building_type': torch.LongTensor of shape (batch_size, 1)</li> <li>'day_of_year': torch.FloatTensor of shape (batch_size, 1)</li> <li>'hour_of_day': torch.FloatTensor of shape (batch_size, 1)</li> <li>'day_of_week': torch.FloatTensor of shape (batch_size, 1)</li> <li>'latitude': torch.FloatTensor of shape (batch_size, 1)</li> <li>'longitude': torch.FloatTensor of shape (batch_size, 1)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Dict</code> <p>dictionary of input tensors</p> required <p>Returns:</p> Type Description <code>Tuple[torch.Tensor, torch.Tensor]</code> <p>predictions, distribution parameters (Tuple[torch.Tensor, torch.Tensor]): outputs</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.base_model.BaseModel.loss","title":"<code>loss(x: torch.Tensor, y: torch.Tensor) -&gt; torch.Tensor</code>  <code>abstractmethod</code>","text":"<p>A function for computing the loss.</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.base_model.BaseModel.predict","title":"<code>predict(model: nn.Module, x: Dict) -&gt; Tuple[torch.Tensor, torch.Tensor]</code>  <code>staticmethod</code>","text":"<p>A function for making a forecast on x with the model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>nn.Module</code> <p>model</p> required <code>x</code> <code>Dict</code> <p>dictionary of input tensors</p> required <p>Returns:</p> Name Type Description <code>predictions</code> <code>torch.Tensor</code> <p>of shape (batch_size, pred_len, 1)</p> <code>torch.Tensor</code> <p>distribution parameters (torch.Tensor]): of shape (batch_size, pred_len, -1)</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.base_model.BaseModel.unfreeze_and_get_parameters_for_finetuning","title":"<code>unfreeze_and_get_parameters_for_finetuning()</code>  <code>abstractmethod</code>","text":"<p>For transfer learning. </p> <ul> <li>Set requires_grad=True for parameters being fine-tuned (if necessary)</li> <li>Return the parameters that should be fine-tuned.</li> </ul>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.base_model.BaseModel.load_from_checkpoint","title":"<code>load_from_checkpoint(checkpoint_path: Union[str, Path])</code>  <code>abstractmethod</code>","text":"<p>Describes how to load the model from checkpoint_path.</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers","title":"<code>buildings_bench.models.transformers</code>","text":""},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.TokenEmbedding","title":"<code>TokenEmbedding</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Helper Module to convert tensor of input indices into corresponding tensor of token embeddings.</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.TokenEmbedding.__init__","title":"<code>__init__(vocab_size: int, emb_size: int)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int</code> <p>number of quantized load values in the entire vocabulary.</p> required <code>emb_size</code> <code>int</code> <p>embedding size.</p> required"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.PositionalEncoding","title":"<code>PositionalEncoding</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Helper Module that adds positional encoding to the token embedding to introduce a notion of order within a time-series.</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.PositionalEncoding.__init__","title":"<code>__init__(emb_size: int, dropout: float, maxlen: int = 500)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>emb_size</code> <code>int</code> <p>embedding size.</p> required <code>dropout</code> <code>float</code> <p>dropout rate.</p> required <code>maxlen</code> <code>int</code> <p>maximum possible length of the incoming time series.</p> <code>500</code>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.TimeSeriesSinusoidalPeriodicEmbedding","title":"<code>TimeSeriesSinusoidalPeriodicEmbedding</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>This module produces a sinusoidal periodic embedding for a sequence of values in [-1, +1].</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.TimeSeriesSinusoidalPeriodicEmbedding.__init__","title":"<code>__init__(embedding_dim: int) -&gt; None</code>","text":"<p>Parameters:</p> Name Type Description Default <code>embedding_dim</code> <code>int</code> <p>embedding size.</p> required"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.TimeSeriesSinusoidalPeriodicEmbedding.forward","title":"<code>forward(x: torch.Tensor) -&gt; torch.Tensor</code>","text":"<p><code>x</code> is expected to be [batch_size, seqlen, 1].</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.ZeroEmbedding","title":"<code>ZeroEmbedding</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Outputs zeros of the desired output dim.</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.ZeroEmbedding.__init__","title":"<code>__init__(embedding_dim: int)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>embedding_dim</code> <code>int</code> <p>embedding size.</p> required"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.ZeroEmbedding.forward","title":"<code>forward(x: torch.Tensor) -&gt; torch.Tensor</code>","text":"<p><code>x</code> is expected to be [batch_size, seqlen, 1].</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.LoadForecastingTransformer","title":"<code>LoadForecastingTransformer</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>An encoder-decoder time series Transformer. Based on PyTorch nn.Transformer.</p> <ul> <li>Uses masking in the decoder to prevent the model from peeking into the future</li> <li>Uses N(0, 0.02) for weight initialization</li> <li>Trains with teacher forcing (i.e. the target is used as the input to the decoder)</li> <li>continuous_loads (True) just predict target values                  (False) categorical over quantized load values</li> </ul>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.LoadForecastingTransformer.__init__","title":"<code>__init__(context_len: int = 168, pred_len: int = 24, vocab_size: int = 2274, num_encoder_layers: int = 3, num_decoder_layers: int = 3, d_model: int = 256, nhead: int = 8, dim_feedforward: int = 256, dropout: float = 0.0, activation: str = 'gelu', continuous_loads: str = False, continuous_head: str = 'mse', ignore_spatial: str = False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>context_len</code> <code>int</code> <p>length of the input sequence.</p> <code>168</code> <code>pred_len</code> <code>int</code> <p>length of the output sequence.</p> <code>24</code> <code>vocab_size</code> <code>int</code> <p>number of quantized load values in the entire vocabulary.</p> <code>2274</code> <code>num_encoder_layers</code> <code>int</code> <p>number of encoder layers.</p> <code>3</code> <code>num_decoder_layers</code> <code>int</code> <p>number of decoder layers.</p> <code>3</code> <code>d_model</code> <code>int</code> <p>number of expected features in the encoder/decoder inputs.</p> <code>256</code> <code>nhead</code> <code>int</code> <p>number of heads in the multi-head attention models.</p> <code>8</code> <code>dim_feedforward</code> <code>int</code> <p>dimension of the feedforward network model.</p> <code>256</code> <code>dropout</code> <code>float</code> <p>dropout value.</p> <code>0.0</code> <code>activation</code> <code>str</code> <p>the activation function of encoder/decoder intermediate layer, relu or gelu.</p> <code>'gelu'</code> <code>continuous_loads</code> <code>bool</code> <p>whether inputs are continuous/to train the model to predict continuous values.</p> <code>False</code> <code>continuous_head</code> <code>str</code> <p>'mse' or 'gaussian_nll'.</p> <code>'mse'</code> <code>ignore_spatial</code> <code>bool</code> <p>whether to ignore the spatial features.</p> <code>False</code>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.transformers.LoadForecastingTransformer.generate_sample","title":"<code>generate_sample(x, temperature = 1.0, greedy = False, num_samples = 1, top_k = 0, top_p = 1.0)</code>","text":"<p>Sample from the conditional distribution.</p> <p>Use output of decoder at each prediction step as input to the next decoder step. Implements greedy decoding and random temperature-controlled sampling.</p> <p>Top-k sampling and nucleus sampling are deprecated.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Dict</code> <p>dictionary of input tensors</p> required <code>temperature</code> <code>float</code> <p>temperature for sampling</p> <code>1.0</code> <code>greedy</code> <code>bool</code> <p>whether to use greedy decoding</p> <code>False</code> <code>num_samples</code> <code>int</code> <p>number of samples to generate</p> <code>1</code> <code>top_k</code> <code>int</code> <p>top k sampling (DEPRECATED)</p> <code>0</code> <code>top_p</code> <code>float</code> <p>nucleus sampling (DEPRECATED)</p> <code>1.0</code> <p>Returns:</p> Name Type Description <code>predictions</code> <code>torch.Tensor</code> <p>of shape [batch_size, pred_len, 1] or shape [batch_size, num_samples, pred_len] if num_samples &gt; 1.</p> <code>distribution_parameters</code> <code>torch.Tensor</code> <p>of shape [batch_size, pred_len, 1]. Not returned if sampling.</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.persistence","title":"<code>buildings_bench.models.persistence</code>","text":""},{"location":"API/models/buildings_bench-models/#buildings_bench.models.persistence.AveragePersistence","title":"<code>AveragePersistence</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Predict each hour as the average over each previous day.</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.persistence.CopyLastDayPersistence","title":"<code>CopyLastDayPersistence</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Predict each hour as the same hour from the previous day.</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.persistence.CopyLastWeekPersistence","title":"<code>CopyLastWeekPersistence</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Predict each hour as the same hour from the previous week.</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.linear_regression","title":"<code>buildings_bench.models.linear_regression</code>","text":""},{"location":"API/models/buildings_bench-models/#buildings_bench.models.linear_regression.LinearRegression","title":"<code>LinearRegression</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Linear regression model that does direct forecasting.</p> <p>It has one weight W and one bias b. The output is computed as y = Wx + b, where W is a matrix of shape [pred_len, context_len].</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.dlinear_regression","title":"<code>buildings_bench.models.dlinear_regression</code>","text":""},{"location":"API/models/buildings_bench-models/#buildings_bench.models.dlinear_regression.moving_avg","title":"<code>moving_avg</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Moving average block to highlight the trend of time series</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.dlinear_regression.series_decomp","title":"<code>series_decomp</code>","text":"<p>         Bases: <code>nn.Module</code></p> <p>Series decomposition block</p>"},{"location":"API/models/buildings_bench-models/#buildings_bench.models.dlinear_regression.DLinearRegression","title":"<code>DLinearRegression</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Decomposition-Linear</p>"},{"location":"API/utilities/buildings_bench-evaluation/","title":"buildings_bench.evaluation","text":"<p>The <code>buildings_bench.evaluation</code> module contains the main functionality for evaluting a model on the benchmark tasks.</p> <p>The <code>buildings_bench.evaluation.managers.DatasetMetricsManager</code> class is the main entry point.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#simple-usage","title":"Simple usage","text":"<pre><code>from buildings_bench.evaluation.managers import DatasetMetricsManager\n# By default, the DatasetMetricsManager also keeps track of NRMSE, NMAE, and NMBE\nmetrics_manager = DatasetMetricsManager()\n# Iterate over the dataset\nfor building_name, building_dataset in buildings_datasets_generator:\n# Register a new building with the manager\nmetrics_manager.add_building_to_dataset_if_missing(\ndataset_name, building_name,\n)\n# Your model makes predictions\n# ...\n# Register the predictions with the manager\nmetrics_manager(\ndataset_name,           # the name of the dataset, e.g., electricity\nbuilding_name,          # the name of the building, e.g., MT_001\ncontinuous_targets,     # the ground truth 24 hour targets\npredictions,            # the model's 24 hour predictions\nbuilding_types_mask,    # a boolean tensor indicating building type\n)\n</code></pre>"},{"location":"API/utilities/buildings_bench-evaluation/#advanced-usage-with-scoring-rule","title":"Advanced usage (with scoring rule)","text":"<pre><code>from buildings_bench.evaluation.managers import DatasetMetricsManager\nfrom buildings_bench.evaluation import scoring_rule_factory\n# By default, the DatasetMetricsManager also keeps track of NRMSE, NMAE, and NMBE\nmetrics_manager = DatasetMetricsManager(scoring_rule = scoring_rule_factory('crps'))\n# Iterate over the dataset\nfor building_name, building_dataset in buildings_datasets_generator:\n# Register a new building with the manager\nmetrics_manager.add_building_to_dataset_if_missing(\ndataset_name, building_name,\n)\n# Your model makes predictions\n# ...\n# Register the predictions with the manager\nmetrics_manager(\ndataset_name,           # the name of the dataset, e.g., electricity\nbuilding_name,          # the name of the building, e.g., MT_001\ncontinuous_targets,     # the ground truth 24 hour targets\npredictions,            # the model's 24 hour predictions\nbuilding_types_mask,    # a boolean tensor indicating building type\ny_categories=targets,   # for scoring rules, the ground truth (discrete categories if using tokenization)\ny_distribution_params=distribution_params, # for scoring rules, the distribution parameters\nbin_values=bin_values   # for scoring rules with categorical variables, the bin values\n)\n</code></pre>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation","title":"<code>buildings_bench.evaluation</code>","text":""},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics_factory","title":"<code>metrics_factory(name: str, types: List[MetricType] = [MetricType.SCALAR]) -&gt; List[Metric]</code>","text":"<p>Create a metric from a name. By default, will return a scalar metric.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the metric.</p> required <code>types</code> <code>List[MetricType]</code> <p>The types of the metric. List[MetricTypes]</p> <code>[MetricType.SCALAR]</code> <p>Returns:</p> Type Description <code>List[Metric]</code> <p>A list of metrics. List[Metric]</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.scoring_rule_factory","title":"<code>scoring_rule_factory(name: str) -&gt; ScoringRule</code>","text":"<p>Create a scoring rule from a name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the scoring rule.</p> required <p>Returns:</p> Type Description <code>ScoringRule</code> <p>A scoring rule.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.all_metrics_list","title":"<code>all_metrics_list() -&gt; List[Metric]</code>","text":"<p>Returns all registered metrics.</p> <p>Returns:</p> Type Description <code>List[Metric]</code> <p>A list of metrics. List[Metric]</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers","title":"<code>buildings_bench.evaluation.managers</code>","text":""},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers.BuildingTypes","title":"<code>BuildingTypes</code>","text":"<p>Enum for supported types of buildings.</p> <p>Attributes:</p> Name Type Description <code>RESIDENTIAL</code> <code>str</code> <p>Residential building type.</p> <code>COMMERCIAL</code> <code>str</code> <p>Commercial building type.</p> <code>RESIDENTIAL_INT</code> <code>int</code> <p>Integer representation of residential building type (0).</p> <code>COMMERCIAL_INT</code> <code>int</code> <p>Integer representation of commercial building type (1).</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers.MetricsManager","title":"<code>MetricsManager</code>","text":"<p>A class that keeps track of all metrics (and a scoring rule)for one or more buildings.</p> <p>Metrics are computed for each building type (residential and commercial).</p> <p>Example:</p> <pre><code>from buildings_bench.evaluation.managers import MetricsManager\nfrom buildings_bench.evaluation import metrics_factory\nfrom buildings_bench import BuildingTypes\nimport torch\nmetrics_manager = MetricsManager(metrics=metrics_factory('cvrmse'))\nmetrics_manager(\ny_true=torch.FloatTensor([1, 2, 3]).view(1,3,1),\ny_pred=torch.FloatTensor([1, 2, 3]).view(1,3,1),\nbuilding_type = BuildingTypes.RESIDENTIAL_INT\n)\nfor metric in metrics_manager.metrics[BuildingTypes.RESIDENTIAL]:\nmetric.mean()\nprint(metric.value) # prints tensor(0.)\n</code></pre>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers.MetricsManager.__init__","title":"<code>__init__(metrics: List[Metric] = None, scoring_rule: ScoringRule = None)</code>","text":"<p>Initializes the MetricsManager.</p> <p>Parameters:</p> Name Type Description Default <code>metrics</code> <code>List[Metric]</code> <p>A list of metrics to compute for each building type.</p> <code>None</code> <code>scoring_rule</code> <code>ScoringRule</code> <p>A scoring rule to compute for each building type.</p> <code>None</code>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers.MetricsManager.get_ppl","title":"<code>get_ppl()</code>","text":"<p>Returns the perplexity of the accumulated loss.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers.MetricsManager.summary","title":"<code>summary(with_loss = False, with_ppl = False)</code>","text":"<p>Return a summary of the metrics for the dataset.</p> <p>A summary maps keys to objects of type Metric or ScoringRule.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers.MetricsManager.reset","title":"<code>reset(loss: bool = True) -&gt; None</code>","text":"<p>Reset the metrics.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers.MetricsManager.__call__","title":"<code>__call__(y_true: torch.Tensor, y_pred: torch.Tensor, building_types_mask: torch.Tensor = None, building_type: int = BuildingTypes.COMMERCIAL_INT, **kwargs: int)</code>","text":"<p>Compute metrics for a batch of predictions.</p> <p>Parameters:</p> Name Type Description Default <code>y_true</code> <code>torch.Tensor</code> <p>The true (unscaled) load values. (continuous) shape is [batch_size, pred_len, 1]</p> required <code>y_pred</code> <code>torch.Tensor</code> <p>The predicted (unscaled) load values. (continuous) shape is [batch_size, pred_len, 1]</p> required <code>building_types_mask</code> <code>torch.Tensor</code> <p>A boolean mask indicating the building type of each building. True (1) if commercial, False (0). Shape is [batch_size].</p> <code>None</code> <code>building_type</code> <code>int</code> <p>The building type of the batch. Can be provided  instead of building_types_mask if all buildings are of the same type.</p> <code>BuildingTypes.COMMERCIAL_INT</code> <p>Other Parameters:</p> Name Type Description <code>y_categories</code> <code>torch.Tensor</code> <p>The true load values. (quantized)</p> <code>y_distribution_params</code> <code>torch.Tensor</code> <p>logits, Gaussian params, etc.</p> <code>bin_values</code> <code>torch.Tensor</code> <p>The bin values for the quantized load.</p> <code>loss</code> <code>torch.Tensor</code> <p>The loss for the batch.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers.DatasetMetricsManager","title":"<code>DatasetMetricsManager</code>","text":"<p>A class that manages a MetricsManager for each building in one or more benchmark datasets.  One DatasetMetricsManager can be used to keep track of all metrics when evaluating a model on all of the benchmark's datasets.</p> <p>This class wil create a Pandas Dataframe summary containing the metrics for each building.</p> <p>Default metrics are NRMSE (CVRMSE), NMAE, NMBE.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers.DatasetMetricsManager.summary","title":"<code>summary(dataset_name: str = None) -&gt; pd.DataFrame</code>","text":"<p>Return a summary of the metrics for the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset to summarize. If None, summarize all datasets.</p> <code>None</code> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A Pandas dataframe with the following columns: dataset: The name of the dataset. building_id: The unique ID of the building. building_type: The type of the building. metric: The name of the metric. metric_type: The type of the metric. (scalar or hour_of_day) value: The value of the metric.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.managers.DatasetMetricsManager.__call__","title":"<code>__call__(dataset_name: str, building_id: str, y_true: torch.Tensor, y_pred: torch.Tensor, building_types_mask: torch.Tensor, **kwargs: torch.Tensor) -&gt; None</code>","text":"<p>Compute metrics for a batch of predictions for a single building in a dataset.</p> <p>Parameters:</p> Name Type Description Default <code>y_true</code> <code>torch.Tensor</code> <p>The true (unscaled) load values. (continuous) shape is [batch_size, pred_len, 1]</p> required <code>y_pred</code> <code>torch.Tensor</code> <p>The predicted (unscaled) load values. (continuous) shape is [batch_size, pred_len, 1]</p> required <code>building_types_mask</code> <code>torch.Tensor</code> <p>A boolean mask indicating the building type of each building. True if commercial.</p> required <p>Other Parameters:</p> Name Type Description <code>y_categories</code> <code>torch.Tensor</code> <p>The true load values. (quantized)</p> <code>y_distribution_params</code> <code>torch.Tensor</code> <p>logits, Gaussian params, etc.</p> <code>bin_values</code> <code>torch.Tensor</code> <p>The bin values for the quantized load.</p> <code>loss</code> <code>torch.Tensor</code> <p>The loss for the batch.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics","title":"<code>buildings_bench.evaluation.metrics</code>","text":""},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics.MetricType","title":"<code>MetricType</code>","text":"<p>Enum class for metric types.</p> <p>Attributes:</p> Name Type Description <code>SCALAR</code> <code>str</code> <p>A scalar metric.</p> <code>HOUR_OF_DAY</code> <code>str</code> <p>A metric that is calculated for each hour of the day.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics.BuildingsBenchMetric","title":"<code>BuildingsBenchMetric</code>","text":"<p>An abstract class for all metrics.</p> <p>The basic idea is to acculumate the errors etc. in a list and then calculate the mean of the errors etc. at the end of the evaluation.</p> <p>Calling the metric will add the error to the list of errors. Calling <code>.mean()</code> will calculate the mean of the errors, populating the <code>.value</code> attribute.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the metric.</p> <code>type</code> <code>MetricType</code> <p>The type of the metric.</p> <code>value</code> <code>float</code> <p>The value of the metric.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics.Metric","title":"<code>Metric</code>","text":"<p>         Bases: <code>BuildingsBenchMetric</code></p> <p>A class that represents an error metric.  </p> <p>Example:</p> <pre><code>rmse = Metric('rmse', MetricType.SCALAR, squared_error, sqrt=True)\nmae = Metric('mae', MetricType.SCALAR, absolute_error)\nnmae = Metric('nmae', MetricType.SCALAR, absolute_error, normalize=True)\ncvrmse = Metric('cvrmse', MetricType.SCALAR, squared_error, normalize=True, sqrt=True)\nnmbe = Metric('nmbe', MetricType.SCALAR, bias_error, normalize=True)\n</code></pre>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics.Metric.__call__","title":"<code>__call__(y_true, y_pred) -&gt; None</code>","text":"<p>y_true (torch.Tensor): shape [batch_size, pred_len] y_pred (torch.Tensor): shape [batch_size, pred_len]</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics.Metric.reset","title":"<code>reset() -&gt; None</code>","text":"<p>Reset the metric.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics.Metric.mean","title":"<code>mean() -&gt; None</code>","text":"<p>Calculate the mean of the error metric.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics.absolute_error","title":"<code>absolute_error(y_true: torch.Tensor, y_pred: torch.Tensor) -&gt; torch.Tensor</code>","text":"<p>A PyTorch method that calculates the absolute error (AE) metric.</p> <p>Parameters:</p> Name Type Description Default <code>y_true</code> <code>torch.Tensor</code> <p>[batch, pred_len]</p> required <code>y_pred</code> <code>torch.Tensor</code> <p>[batch, pred_len]</p> required <p>Returns:</p> Name Type Description <code>error</code> <code>torch.Tensor</code> <p>[batch, pred_len]</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics.squared_error","title":"<code>squared_error(y_true: torch.Tensor, y_pred: torch.Tensor) -&gt; torch.Tensor</code>","text":"<p>A PyTorch method that calculates the squared error (SE) metric.</p> <p>Parameters:</p> Name Type Description Default <code>y_true</code> <code>torch.Tensor</code> <p>[batch, pred_len]</p> required <code>y_pred</code> <code>torch.Tensor</code> <p>[batch, pred_len]</p> required <p>Returns:</p> Name Type Description <code>error</code> <code>torch.Tensor</code> <p>[batch, pred_len]</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.metrics.bias_error","title":"<code>bias_error(y_true: torch.Tensor, y_pred: torch.Tensor) -&gt; torch.Tensor</code>","text":"<p>A PyTorch method that calculates the bias error (BE) metric.</p> <p>Parameters:</p> Name Type Description Default <code>y_true</code> <code>torch.Tensor</code> <p>[batch, pred_len]</p> required <code>y_pred</code> <code>torch.Tensor</code> <p>[batch, pred_len]</p> required <p>Returns:</p> Name Type Description <code>error</code> <code>torch.Tensor</code> <p>[batch, pred_len]</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.scoring_rules","title":"<code>buildings_bench.evaluation.scoring_rules</code>","text":""},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.scoring_rules.ScoringRule","title":"<code>ScoringRule</code>","text":"<p>         Bases: <code>BuildingsBenchMetric</code></p> <p>An abstract class for all scoring rules.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.scoring_rules.RankedProbabilityScore","title":"<code>RankedProbabilityScore</code>","text":"<p>         Bases: <code>ScoringRule</code></p> <p>A class that calculates the ranked probability score (RPS) metric for categorical distributions.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.scoring_rules.RankedProbabilityScore.rps","title":"<code>rps(y_true, y_pred_logits, bin_values) -&gt; None</code>","text":"<p>A PyTorch method that calculates the ranked probability score metric    for categorical distributions.</p> <p>Since the bin values are centroids of clusters along the real line,    we have to compute the width of the bins by summing the distance to    the left and right centroids of the bin (divided by 2), except for    the first and last bins, where we only need to sum the distance to    the right centroid of the first bin and the left centroid of the    last bin, respectively.</p> <p>Parameters:</p> Name Type Description Default <code>y_true</code> <code>torch.Tensor</code> <p>of shape [batch_size, seq_len, 1] categorical labels</p> required <code>y_pred_logits</code> <code>torch.Tensor</code> <p>of shape [batch_size, seq_len, vocab_size] logits</p> required <code>bin_values</code> <code>torch.Tensor</code> <p>of shape [vocab_size]</p> required"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.scoring_rules.ContinuousRankedProbabilityScore","title":"<code>ContinuousRankedProbabilityScore</code>","text":"<p>         Bases: <code>ScoringRule</code></p> <p>A class that calculates the Gaussian continuous ranked probability score (CRPS) metric.</p>"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.scoring_rules.ContinuousRankedProbabilityScore.crps","title":"<code>crps(true_continuous, y_pred_distribution_params) -&gt; None</code>","text":"<p>Computes the Gaussian CRPS.</p> <p>Parameters:</p> Name Type Description Default <code>true_continuous</code> <code>torch.Tensor</code> <p>of shape [batch_size, seq_len, 1]</p> required <code>y_pred_distribution_params</code> <code>torch.Tensor</code> <p>of shape [batch_size, seq_len, 2]</p> required"},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.aggregate","title":"<code>buildings_bench.evaluation.aggregate</code>","text":""},{"location":"API/utilities/buildings_bench-evaluation/#buildings_bench.evaluation.aggregate.return_aggregate_median","title":"<code>return_aggregate_median(model_list, results_dir, experiment = 'zero_shot', metrics = ['cvrmse'], exclude_simulated = True, only_simulated = False, oov_list = [], reps = 50000)</code>","text":"<p>Compute the aggregate median for a list of models and metrics over all buildings. Also returns the stratified 95% boostrap CIs for the aggregate median.</p> <p>Parameters:</p> Name Type Description Default <code>model_list</code> <code>list</code> <p>List of models to compute aggregate median for.</p> required <code>results_dir</code> <code>str</code> <p>Path to directory containing results.</p> required <code>experiment</code> <code>str</code> <p>Experiment type. Defaults to 'zero_shot'. Options: 'zero_shot', 'transfer_learning'.</p> <code>'zero_shot'</code> <code>metrics</code> <code>list</code> <p>List of metrics to compute aggregate median for. Defaults to ['cvrmse'].</p> <code>['cvrmse']</code> <code>exclude_simulated</code> <code>bool</code> <p>Whether to exclude simulated data. Defaults to True.</p> <code>True</code> <code>only_simulated</code> <code>bool</code> <p>Whether to only include simulated data. Defaults to False.</p> <code>False</code> <code>oov_list</code> <code>list</code> <p>List of OOV buildings to exclude. Defaults to [].</p> <code>[]</code> <code>reps</code> <code>int</code> <p>Number of bootstrap replicates to use. Defaults to 50000.</p> <code>50000</code> <p>Returns:</p> Name Type Description <code>result_dict</code> <code>Dict</code> <p>Dictionary containing aggregate median and CIs for each metric and building type.</p>"},{"location":"API/utilities/buildings_bench-tokenizer/","title":"buildings_bench.tokenizer","text":""},{"location":"API/utilities/buildings_bench-tokenizer/#buildings_bench.tokenizer","title":"<code>buildings_bench.tokenizer</code>","text":""},{"location":"API/utilities/buildings_bench-tokenizer/#buildings_bench.tokenizer.LoadQuantizer","title":"<code>LoadQuantizer</code>","text":"<p>Quantize load timeseries with KMeans. Merge centroids that are within a threshold.</p>"},{"location":"API/utilities/buildings_bench-tokenizer/#buildings_bench.tokenizer.LoadQuantizer.__init__","title":"<code>__init__(seed: int = 1, num_centroids: int = 2274, with_merge: int = False, merge_threshold: int = 0.01, device: str = 'cpu')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>seed</code> <code>int</code> <p>random seed. Default: 1.</p> <code>1</code> <code>num_centroids</code> <code>int</code> <p>number of centroids: Default: 2274.</p> <code>2274</code> <code>with_merge</code> <code>bool</code> <p>whether to merge centroids that are within a threshold: Default: False.</p> <code>False</code> <code>merge_threshold</code> <code>float</code> <p>threshold for merging centroids. Default: 0.01 (kWh).</p> <code>0.01</code> <code>device</code> <code>str</code> <p>cpu or cuda. Default: cpu.</p> <code>'cpu'</code>"},{"location":"API/utilities/buildings_bench-tokenizer/#buildings_bench.tokenizer.LoadQuantizer.transform","title":"<code>transform(sample: Union[np.ndarray, torch.Tensor]) -&gt; Union[np.ndarray, torch.Tensor]</code>","text":"<p>Transform a sample to a sequence of indices</p> <p>The sample contains continuous values which we quantize</p> <p>Parameters:</p> Name Type Description Default <code>sample</code> <code>np.ndarray) or (torch.Tensor</code> <p>of shape (n, 1) or (b,n,1).  numpy if device is cpu or torch Tensor if device is cuda.</p> required <p>Returns:</p> Type Description <code>Union[np.ndarray, torch.Tensor]</code> <p>np.ndarray or torch.Tensor: of shape (n, 1) or (b,n,1).</p>"},{"location":"API/utilities/buildings_bench-tokenizer/#buildings_bench.tokenizer.LoadQuantizer.undo_transform","title":"<code>undo_transform(sample: Union[np.ndarray, torch.Tensor]) -&gt; Union[np.ndarray, torch.Tensor]</code>","text":"<p>Undo the transformation of a sample</p> <p>The sample contains quantized values which we dequantize</p> <p>Parameters:</p> Name Type Description Default <code>sample</code> <code>np.ndarray) or (torch.LongTensor</code> <p>of shape (n, 1) or (b,n,1).  numpy if device is cpu or torch Tensor if device is cuda.</p> required <p>Returns:</p> Type Description <code>Union[np.ndarray, torch.Tensor]</code> <p>np.ndarray or torch.Tensor: of shape (n, 1) or (b,n,1).</p>"},{"location":"API/utilities/buildings_bench-transforms/","title":"buildings_bench.transforms","text":""},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms","title":"<code>buildings_bench.transforms</code>","text":""},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.BoxCoxTransform","title":"<code>BoxCoxTransform</code>","text":"<p>A class that computes and applies the Box-Cox transform to data.</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.BoxCoxTransform.__init__","title":"<code>__init__(max_datapoints = 1000000)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>max_datapoints</code> <code>int</code> <p>If the number of datapoints is greater than this, subsample.</p> <code>1000000</code>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.BoxCoxTransform.train","title":"<code>train(data: np.array) -&gt; None</code>","text":"<p>Train the Box-Cox transform on the data with sklearn.preprocessing.PowerTransformer.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>np.array</code> <p>of shape (n, 1) or (b,n,1)</p> required"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.BoxCoxTransform.save","title":"<code>save(output_path: Path) -&gt; None</code>","text":"<p>Save the Box-Cox transform</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.BoxCoxTransform.load","title":"<code>load(saved_path: Path) -&gt; None</code>","text":"<p>Load the Box-Cox transform</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.BoxCoxTransform.transform","title":"<code>transform(sample: np.ndarray) -&gt; np.ndarray</code>","text":"<p>Transform a sample via Box-Cox. Not ran on the GPU, so input/output are numpy arrays.</p> <p>Parameters:</p> Name Type Description Default <code>sample</code> <code>np.ndarray</code> <p>of shape (n, 1) or (b,n,1) </p> required <p>Returns:</p> Name Type Description <code>transformed_sample</code> <code>np.ndarray</code> <p>of shape (n, 1) or (b,n,1)</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.BoxCoxTransform.undo_transform","title":"<code>undo_transform(sample: Union[np.ndarray, torch.Tensor]) -&gt; Union[np.ndarray, torch.Tensor]</code>","text":"<p>Undo the transformation of a sample via Box-Cox</p> <p>Parameters:</p> Name Type Description Default <code>sample</code> <code>np.ndarray) or (torch.LongTensor</code> <p>of shape (n, 1) or (b,n,1).  numpy if device is cpu or torch Tensor if device is cuda.</p> required <p>Returns:</p> Name Type Description <code>unscaled_sample</code> <code>np.ndarray or torch.Tensor</code> <p>of shape (n, 1) or (b,n,1).</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.StandardScalerTransform","title":"<code>StandardScalerTransform</code>","text":"<p>A class that standardizes data by removing the mean and scaling to unit variance.</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.StandardScalerTransform.__init__","title":"<code>__init__(max_datapoints = 1000000, device = 'cpu')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>max_datapoints</code> <code>int</code> <p>If the number of datapoints is greater than this, subsample.</p> <code>1000000</code> <code>device</code> <code>str</code> <p>'cpu' or 'cuda'</p> <code>'cpu'</code>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.StandardScalerTransform.train","title":"<code>train(data: np.array) -&gt; None</code>","text":"<p>Train the StandardScaler transform on the data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>np.array</code> <p>of shape (n, 1) or (b,n,1)</p> required"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.StandardScalerTransform.save","title":"<code>save(output_path: Path) -&gt; None</code>","text":"<p>Save the StandardScaler transform</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.StandardScalerTransform.load","title":"<code>load(saved_path: Path) -&gt; None</code>","text":"<p>Load the StandardScaler transform</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.StandardScalerTransform.transform","title":"<code>transform(sample: Union[np.ndarray, torch.Tensor]) -&gt; torch.Tensor</code>","text":"<p>Transform a sample via StandardScaler</p> <p>Parameters:</p> Name Type Description Default <code>sample</code> <code>np.ndarray or torch.Tensor</code> <p>shape (n, 1) or (b,n,1) </p> required <p>Returns:</p> Name Type Description <code>transformed_samples</code> <code>torch.Tensor</code> <p>shape (n, 1) or (b,n,1)</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.StandardScalerTransform.undo_transform","title":"<code>undo_transform(sample: Union[np.ndarray, torch.Tensor]) -&gt; torch.Tensor</code>","text":"<p>Undo the transformation of a sample via StandardScaler</p> <p>Parameters:</p> Name Type Description Default <code>sample</code> <code>np.ndarray</code> <p>of shape (n, 1) or (b,n,1) or torch.Tensor of shape (n, 1) or (b,n,1)</p> required <p>Returns:</p> Name Type Description <code>unscaled_sample</code> <code>torch.Tensor</code> <p>of shape (n, 1) or (b,n,1)</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.StandardScalerTransform.undo_transform_std","title":"<code>undo_transform_std(scaled_std: torch.Tensor) -&gt; torch.Tensor</code>","text":"<p>Undo transform for standard deviation.</p> <p>Parameters:</p> Name Type Description Default <code>scaled_std</code> <code>torch.Tensor</code> <p>of shape (n, 1) or (b,n,1)</p> required <p>Returns:</p> Name Type Description <code>unscaled_std</code> <code>torch.Tensor</code> <p>of shape (n, 1) or (b,n,1)</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.LatLonTransform","title":"<code>LatLonTransform</code>","text":"<p>Pre-processing lat,lon data with standard normalization by Buildings-900K training set.</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.LatLonTransform.transform_latlon","title":"<code>transform_latlon(latlon: np.ndarray) -&gt; np.ndarray</code>","text":"<p>Transform a raw Lat/Lon sample into a normalized Lat/Lon sample</p> <p>Parameters:</p> Name Type Description Default <code>latlon</code> <code>np.ndarray</code> <p>of shape (2,).</p> required <p>Returns:</p> Name Type Description <code>transformed_latlon</code> <code>np.ndarray</code> <p>of shape (2,).</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.LatLonTransform.undo_transform","title":"<code>undo_transform(normalized_latlon: np.ndarray) -&gt; np.ndarray</code>","text":"<p>Undo the transformation of a sample</p> <p>Parameters:</p> Name Type Description Default <code>normalized_latlon</code> <code>np.ndarray</code> <p>of shape (n, 2) or (b,n,2).</p> required <p>Returns:</p> Name Type Description <code>unnormalized_latlon</code> <code>np.ndarray</code> <p>of shape (n, 2) or (b,n,2).</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.LatLonTransform.transform","title":"<code>transform(puma_id: str) -&gt; np.ndarray</code>","text":"<p>Look up a PUMA ID's normalized Lat/Lon centroid.</p> <p>This is used in the Buildings-900K Dataset to look up a lat/lon for each building's PUMA.</p> <p>Parameters:</p> Name Type Description Default <code>puma_id</code> <code>str</code> <p>PUMA ID</p> required <p>Returns:</p> Name Type Description <code>centroid</code> <code>np.ndarray</code> <p>of shape (1,2)</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.TimestampTransform","title":"<code>TimestampTransform</code>","text":"<p>Extract timestamp features from a Pandas timestamp Series.</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.TimestampTransform.__init__","title":"<code>__init__(is_leap_year: bool = False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>is_leap_year</code> <code>bool</code> <p>Whether the year of the building data is a leap year or not.</p> <code>False</code>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.TimestampTransform.transform","title":"<code>transform(timestamp_series: pd.DataFrame) -&gt; np.ndarray</code>","text":"<p>Extract timestamp features from a Pandas timestamp Series.</p> <ul> <li>Day of week (0-6)</li> <li>Day of year (0-364)</li> <li>Hour of day (0-23)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>timestamp_series</code> <code>pd.DataFrame</code> <p>of shape (n,) or (b,n)</p> required <p>Returns:</p> Name Type Description <code>time_features</code> <code>np.ndarray</code> <p>of shape (n,3) or (b,n,3)</p>"},{"location":"API/utilities/buildings_bench-transforms/#buildings_bench.transforms.TimestampTransform.undo_transform","title":"<code>undo_transform(time_features: np.ndarray) -&gt; np.ndarray</code>","text":"<p>Convert normalized time features back to original time features</p> <p>Parameters:</p> Name Type Description Default <code>time_features</code> <code>np.ndarray</code> <p>of shape (n, 3) or (b,n,3)</p> required <p>Returns:</p> Name Type Description <code>unnormalized_time_features</code> <code>np.ndarray</code> <p>of shape (n, 3) or (b,n,3)</p>"},{"location":"API/utilities/buildings_bench-utils/","title":"buildings_bench.utils","text":""},{"location":"API/utilities/buildings_bench-utils/#buildings_bench.utils","title":"<code>buildings_bench.utils</code>","text":""},{"location":"API/utilities/buildings_bench-utils/#buildings_bench.utils.set_seed","title":"<code>set_seed(seed: int = 42) -&gt; None</code>","text":"<p>Set random seed for reproducibility.</p>"},{"location":"API/utilities/buildings_bench-utils/#buildings_bench.utils.save_model_checkpoint","title":"<code>save_model_checkpoint(model, optimizer, scheduler, step, path)</code>","text":"<p>Save model checkpoint.</p>"},{"location":"API/utilities/buildings_bench-utils/#buildings_bench.utils.load_model_checkpoint","title":"<code>load_model_checkpoint(path, model, optimizer, scheduler, local_rank)</code>","text":"<p>Load model checkpoint.</p>"},{"location":"API/utilities/buildings_bench-utils/#buildings_bench.utils.worker_init_fn_eulp","title":"<code>worker_init_fn_eulp(worker_id)</code>","text":"<p>Set random seed for each worker and init file pointer for Buildings-900K dataset workers.</p> <p>Parameters:</p> Name Type Description Default <code>worker_id</code> <code>int</code> <p>worker id</p> required"},{"location":"API/utilities/buildings_bench-utils/#buildings_bench.utils.time_features_to_datetime","title":"<code>time_features_to_datetime(time_features: np.ndarray, year: int) -&gt; np.array</code>","text":"<p>Convert time features to datetime objects.</p> <p>Parameters:</p> Name Type Description Default <code>time_features</code> <code>np.ndarray</code> <p>Array of time features. [:,0] is day of year, [:,1] is day of week, [:,2] is hour of day.</p> required <code>year</code> <code>int</code> <p>Year to use for datetime objects.</p> required <p>Returns:</p> Type Description <code>np.array</code> <p>np.array: Array of datetime objects.</p>"}]}